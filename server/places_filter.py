from g4f.client import Client

categories = {
    'административный': 'Административная граница',
    'аэропорт': 'Объект для полетов воздушных судов, включая взлеты, посадки и '
                'техническое обслуживание',
    'деятельность': 'Клубы, общественные центры',
    'домашнее животное': 'Места, которые могут быть интересны владельцам домашних '
                         'животных',
    'досуг': 'Места, где можно расслабиться',
    'железная дорога': 'Пути и инфраструктура для железнодорожного транспорта и '
                       'услуг',
    'здание': 'Отдельно стоящие здания и сооружения',
    'здравоохранение': 'Места, где предоставляются медицинские услуги: больницы, '
                       'клиники и многое другое',
    'зона низкой эмиссии': 'Зона с низким уровнем выбросов',
    'кемпинг': 'Места, где можно провести время на свежем воздухе, включая '
               'ночевку',
    'коммерческое': 'Места, где можно что-то купить или продать',
    'лыжи': 'Объекты инфраструктуры, связанные с горнолыжными видами спорта ',
    'населенный пункт': 'Место, где живут люди',
    'национальный_парк': 'Национальные парки',
    'образовательное': 'Место, предоставляющее учебные помещения и среду для '
                       'обучения',
    'общественное питание': 'Места общественного питания: рестораны, кафе, бары и '
                            'т.д.',
    'общественный транспорт': 'Станции и остановки общественного транспорта',
    'офис': 'Офис предприятия, компании, администрации или организация',
    'парковка': 'Места, где можно оставить автомобиль',
    'пляж': 'Берег водоема, покрытый песком, гравием или крупными обломками скалы',
    'политика': 'Политическая граница',
    'почтовый индекс': 'Граница с почтовым индексом',
    'природные': 'Места, где можно наслаждаться природой, исследовать природные '
                 'явления',
    'производство': 'Место, которое что-то производит',
    'прокат': 'Места, где можно взять вещи напрокат',
    'развлекательное': 'Место, где можно весело провести свободное время',
    'размещение': 'Место для проживания',
    'религия': 'Места, связанные с определенной верой или религиозным '
               'учреждением, такие как церкви, мечети, синагоги, храмы и другие '
               'места отправления культа',
    'рукотворный': 'Всё, что было построено людьми',
    'сервис': 'Места, предоставляющие услуги населению',
    'спорт ': ' Объекты инфраструктуры, связанные с различными видами спорта',
    'туризм': 'Места, которые могут быть интересны туристам',
    'удобства': 'Небольшие удобства, которые могут быть полезны в различных '
                'ситуациях',
    'уход за детьми': 'Место, предоставляющее услуги по уходу за детьми, пока '
                      'родители на работе',
    'шоссе': 'Дороги, варьирующиеся от небольших проселков до крупных трасс',
    'энергетика': 'Инфраструктура, связанная с выработкой и распределением '
                  'электрической энергии'
}


def get_places_ids(places, user_description):
    context = ''
    for place in places:
        if 'name' not in place or 'categories' not in place:
            continue
        id = place['id']
        name = place['name']
        place_categories = place['categories']
        associated_words_list = []
        for category in place_categories:
            associated_words_i = category + ', ' + categories[category]
            associated_words_list.append(associated_words_i)
        associated_words = ', '.join(associated_words_list)
        place_description = f'`{name}` - это место, которое ассоциируется со следующими словами: {associated_words}. `{name}` имеет id {id}. '
        context += place_description
    question = f'Назови id мест, которые мне нужно посетить, если {user_description}. Скинь список id через запятую, без текста.'

    content = context + question

    client = Client()
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": content}],
    )
    ids_s = response.choices[0].message.content
    if ', ' in ids_s:
        ids_list = ids_s.split(', ')
    else:
        ids_list = ids_s.split(',')
    try:
        ids_list = list(map(int, ids_list))
    except Exception:
        ids_list = []
        for i in range(100, 0):
            if str(i) in ids_s:
                ids_list.append(i)
                ids_s = ids_s.replace(str(i), '')
    return ids_list
